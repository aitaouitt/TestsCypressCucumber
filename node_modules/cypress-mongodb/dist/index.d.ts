import { Document } from 'mongodb';
declare global {
    namespace Cypress {
        interface Chainable<Subject = any> {
            aggregate(pipeline: Document[], database?: string, collection?: string): Chainable<Subject>;
            createCollection(collection: string, database?: string): Chainable<Subject>;
            dropCollection(collection: string, database?: string): Chainable<Subject>;
            insertOne(document: Document, collection?: string, database?: string): Chainable<Subject>;
            insertMany(documents: Document[], collection?: string, database?: string): Chainable<Subject>;
            deleteOne(filter: Document, collection?: string, database?: string): Chainable<Subject>;
            deleteMany(filter: Document, collection?: string, database?: string): Chainable<Subject>;
            findOne(query: Document, collection?: string, database?: string): Chainable<Subject>;
            findMany(query: Document, collection?: string, database?: string): Chainable<Subject>;
        }
    }
}
export interface MongoDetails {
    uri: string;
    database?: string;
    collection?: string;
    pipeline?: Document | Document[];
}
export declare const configurePlugin: (on: Cypress.PluginEvents) => Promise<void>;
export declare const addCommands: () => Promise<void>;
